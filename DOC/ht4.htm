<HTML><HEAD>
<TITLE>OS/2 Steps, Files</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#0000FF" VLINK="#FF0000" ALINK="#FF0000">
<H1>OS/2 Steps, Files</H1>

<UL>
<LI><a href="#C1">Creating a OS/2 Plug-In</a>
<LI><a href="#C2">OS/2 Files</a>
<LI><a href="#C3">Known Problems</a>
</UL>

<a name="C1"><h2>Creating A OS/2 Plug-In</h2></a>
<P>
In order to create a OS/2 plug-in you need a C++ complier, such as
IBM's Visual Age C++ version 3.0 compiler.
<P>
<OL>
<LI>Create a directory on your hard drive for the plug-in project. For
example, you might call this directory plug-in.
<LI>Download the OS/2 Sample Source Code. Note that the file is
compressed.
<LI>Use the resulting dialog boxes to save the file in the directory
you created for the plug-in project (for example, in c:\plug-in). The
compressed file is saved in the directory you specified.
<LI>Decompress the file. If you are using pkunzip to decompress the
file, use the -d flag to maintain the directory structure stored in
the zip file. A readme file is placed in the directory. The following
directory structure is created:
<UL>
<LI>
<B>\common</B>
contains common build files NPOS2.CPP
<LI>
<B>\doc</B>
contains this documentation
<LI>
<B>\include</B>
contains header files NPAPI.H and NPUPP.H
<LI>
<B>\sample\npaudio</B>
directory contains a plugin that plays a WAV audio file
<LI>
<B>\sample\npbitmap</B>
directory contains a plugin that displays an OS/2 bitmap
<LI>
<B>\sample\npclock</B>
directory contains a plugin that displays a clock. The clock plugin responds
to an additional attributes in the
<a href="pr2.htm">EMBED</a><BR>
tag named TRANSPARENCY. The two valid values are ON and OFF.
<LI>
<B>\sample\npdraw</B>
directory contains a plugin that streams a drawing. A random draw data file
can be generated by building and running the GENDATA.EXE program.
<LI>
<B>\sample\npshell</B>
directory contains a template of the files you use to create a new plug-in
<LI>
<B>\sample\npvideo</B>
directory contains a plugin that plays a AVI video file
<LI>
<B>\test</B>
contains test HTML files for the plugin samples
</UL>
<LI>Create a new subdirectory to work in. For example,
c:\plug-in\sample\myplug.
<LI>Copy all the directories and files in the npshell directory into
your new working directory. In addition, copy into this directory any
auxiliary plug-in specific files you have created. For example, you
may have written code to implement window handling functionality.
<LI>Using your compiler, open the existing makefile in your working
directory.
<LI>Edit the resource file NPSHELL.RC
to include the correct information. You must change the MIME type and
the file extension values. For example, if you were creating an AVI
plug-in, your resource file would look like this:
<PRE>
#include "npapi.h"
RCDATA NP_INFO_ProductVersion { 1,0,0,1
}
RCDATA NP_INFO_MIMEType       {"Sample/Video\0"}
RCDATA NP_INFO_FileExtents    {"avi\0"}
RCDATA NP_INFO_FileOpenName   {"OS/2 Video Plugin\0"}
</PRE>
To include multiple MIME types in the plug-in, use a vertical bar to
delimit each value in the MIME type. For example, VALUE "MIMEType",
"video/x-msvideo | video/quicktime\0"
<LI>Save the resource file. The resource file allows Netscape to query
the plug-in without having to load it in memory.
<LI>Open the file npshell.cpp. This is a compilable shell file that
provides the framework for creating a plug-in. By working in
npshell.cpp, you simply fill in the necessary code for basic plug-in
functionality.
<LI>In npshell.cpp, write the code for the functions needed for your
plug-in. The Plug-In Application Programming Interface provides a
detailed description of each function. You may want to take a look at
the other samples.
<LI>Save the npshell.cpp file.
<LI>Using your compiler, build the project. The file npshell.dll is created.
You can get a debug version by specifying
<B>OPT=DEBUG</B>
on the command line and a dynamically-linked DLL by specifying
<B>CRT=DYNAMIC</B>.
<LI>Copy the dll file (npshell.dll) into the plugins
subdirectory of Navigator. If this directory doesn't exist, create it
in the same location as netscape.exe. If the plug-in has associated
files, create a separate subdirectory and places the files there.
<LI>Restart Navigator. When Netscape Navigator starts up, it checks
for plug-in modules in the netscape\plugins directory.
<LI>From the Help menu of Navigator, choose About Plug-ins. A list of
all plug-ins in the directory is displayed. You should see your Mime
type listed.
<LI>Test your plug-in by creating an HTML document.
</OL>

<HR>
<a name="C2"><h2>OS/2 Files</h2></a>
<P>
When you unzip the OS/2 sample source code, several subdirectories
are automatically created in your working directory.
<P>
The contents of each directory include:
<H4>\common Directory</H4>
<UL>
<LI>npos2.cpp - Passes plug-in function pointers to Netscape for
communication and contains shell functions for Navigator entry
points. This file also implements version checking. You should not
need to change this file.
</UL>
<H4>\include Directory</H4>
<UL>
<LI>npapi.h - Plugin header file for plugin entry points and callback to
Netscape.
<LI>npupp.h - Function pointer tables and DLL entry point definitions.
</UL>
<H4>\sample\npaudio Directory</H4>
<UL>
<LI>npaudio.cpp - main line for plugin
<LI>audio.h - constants for resources
<LI>audio.hpp - class header for AUDIO class
<LI>audio.cpp - class implementation for AUDIO class
<LI>npaudio.rc - resources
<LI>npaudio.def - def file
<LI>makefile - A IBM VisualAge C++ 3.0 make file for plug-ins.
</UL>
<H4>\sample\npbitmap Directory</H4>
<UL>
<LI>npbitmap.cpp - main line for plugin
<LI>npbitmap.rc - resources
<LI>npbitmap.def - def file
<LI>makefile - A IBM VisualAge C++ 3.0 make file for plug-ins.
</UL>
<H4>\sample\npclock Directory</H4>
<UL>
<LI>npclock.cpp - main line for plugin
<LI>clock.h - constants for resource
<LI>clock.hpp - class header for Clock class
<LI>clock.cpp - class implementation for Clock class
<LI>npclock.rc - resources
<LI>npclock.def - def file
<LI>makefile - A IBM VisualAge C++ 3.0 make file for plug-ins.
</UL>
<H4>\sample\npdraw Directory</H4>
<UL>
<LI>npdraw.cpp - main line for plugin
<LI>npdraw.h - constants
<LI>npdraw.rc - resources
<LI>npdraw.def - def file
<LI>makefile - A IBM VisualAge C++ 3.0 make file for plug-ins.
<LI>gendata.cpp - source to generate random data
<LI>gendata.def - def file for GENDATA.EXE
<LI>gendata.mak - Makefile for GENDATA.EXE
</UL>
<H4>\samples\npshell Directory</H4>
<UL>
<LI>npshell.cpp - Shell implementation of all plug-in methods. This
file also includes suggestions (as comments) on plug-in development
as applicable to a specific method. You use this file to create your
own plug-in.
<LI>npshell.rc - resources
<LI>npshell.def - Used by the linker to resolve export symbols for
plug-in entry points. You should not need to change this file.
<LI>npshell.rc - Contains boiler-plate symbols for plug-ins.
<LI>makefile - A IBM VisualAge C++ 3.0 make file for plug-ins.
</UL>
<H4>\sample\npvideo Directory</H4>
<UL>
<LI>npvideo.cpp - main line for plugin
<LI>video.h - constants for resources
<LI>video.hpp - class header for VIDEO class
<LI>video.cpp - class implementation for VIDEO class
<LI>npvideo.rc - resources
<LI>npvideo.def - def file
<LI>makefile - A IBM VisualAge C++ 3.0 make file for plug-ins.
</UL>
<H4>\test Directory</H4>
<UL>
<LI>clock.clk - data file for clock plugin
<LI>clock1.clk - data file for clock plugin
<LI>clock.htm - HTML to display clock plugin
<LI>draw.lst - data file for draw plugin
<LI>draw.htm - HTML to display draw plugin
<LI>npaudio.htm - HTML for audio plugin (uses OS/2 provided wave file)
<LI>npshell.htm - HTML for shell plugin
<LI>npshell.smp - data file for shell plugin
<LI>npvideo.htm - HTML for video plugin (uses OS/2 provided movie)
<LI>os2tile.bmp - data file for bitmap plugin
<LI>os2tile.htm - HTML for bitmap plugin
</UL>
<HR>
<a name="C3"><h2>Known Problems</h2></a>
<P>
The following restrictions apply in this Beta level toolkit:
<UL>
<LI>The plugins use some standard MIME types. This means that the plugin is
used instead of the default action for the MIME type. For example the bitmap
plugin registers image/gif so all gif files are displayed using this plugin.
<LI>Printing is not yet supported.
<LI>When using the draw plugin from a remote server, the page may need to
be reloaded to complete the download of the streamed data.
<LI>The video plugin display a gray rectangle instead of the first frame of
the video. Click anywhere in the plugin to see the bitmap.
<LI>The size of the canvas for the video plugin is hardcoded.
<LI>When two plug-in objects on a page resolve to the same URL,
only one object will be given to a plugin; the other object will not.
As a workaround, make a copy of the second object and rename it, and
use it in the place of the object which would not show.
</UL>
</BODY>
</HTML>
 
 